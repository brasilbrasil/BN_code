obj.class <- napply(names, function(x) as.character(class(x))[1])
obj.mode <- napply(names, mode)
obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)
obj.size <- napply(names, object.size)
obj.dim <- t(napply(names, function(x)
as.numeric(dim(x))[1:2]))
vec <- is.na(obj.dim)[, 1] & (obj.type != "function")
obj.dim[vec, 1] <- napply(names, length)[vec]
out <- data.frame(obj.type, obj.size, obj.dim)
names(out) <- c("Type", "Size", "Rows", "Columns")
if (!missing(order.by))
out <- out[order(out[[order.by]], decreasing=decreasing), ]
if (head)
out <- head(out, n)
out
}
# shorthand
lsos <- function(..., n=10) {
.ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)
}
fix(lsos)
.ls.objects
ls.objects
x=('a', 'c', 'b')
x=c('a', 'c', 'b')
a=2
get(x[1])
x=c('a', 'c', 'b')
a=2
x[1]
get(x[1])
x="2012-08-15 00:00:40.169"
as.Date(x,format='%Y-%m/%d hh:mm:ss')
as.Date(x,format='%Y-%m-%d hh:mm:ss')
y="2012-08-15"
date=as.Date(y,format='%Y-%m-%d')
date
month(date)
y="2012-08-15"
datey=as.Date(y,format='%Y-%m-%d')
z="2012-08-01"
datez=as.Date(z,format='%Y-%m-%d')
y-z
?strptime
x="2012-08-15 00:00:40.169"
date=as.Date(x,format='%Y-%m-%d %H:%M:%S')
date
x="2012-08-15 08:32:40.169"
date=as.Date(x,format='%Y-%m-%d %H:%M:%S')
date
summary(date)
strptime(x,format='%Y-%m-%d %H:%M:%S')
x="2012-08-15 08:32:40.169"
#date=as.Date(x,format='%Y-%m-%d %H:%M:%S')
date=strptime(x,format='%Y-%m-%d %H:%M:%S')
num_date=as.numeric(date)
num_date
date
x="2012-08-15 04:22:40.169"
datex=strptime(x,format='%Y-%m-%d %H:%M:%S')
y="2012-08-15 08:32:40.169"
datey=strptime(y,format='%Y-%m-%d %H:%M:%S')
datey-datex
x=datey-datex
x
fix(x)
x="2012-07-15 04:22:40.169"
datex=strptime(x,format='%Y-%m-%d %H:%M:%S')
y="2012-08-15 08:32:40.169"
datey=strptime(y,format='%Y-%m-%d %H:%M:%S')
y-x
difftime(y,x)
x="2012-07-15 04:22:40.169"
datex=strptime(x,format='%Y-%m-%d %H:%M:%S')
y="2012-08-15 08:32:40.169"
datey=strptime(y,format='%Y-%m-%d %H:%M:%S')
z=difftime(y,x)
as.date(z)
as.Date(z)
as.Date(z, format='%d')
z
z=difftime(y,x)
z
z[1]
fix(z)
as.numeric(z)
as.Date(as.numeric(z), format='%d')
as.Date
? as.Date
origin="2012-00-00 00:00:00"
origin=strptime(origin,format='%Y-%m-%d %H:%M:%S')
origin
origin="2012-01-01 00:00:00"
origin=strptime(origin,format='%Y-%m-%d %H:%M:%S')
origin
origin="2012-01-01 00:00:00"
origin=strptime(origin,format='%Y-%m-%d %H:%M:%S')
as.Date(as.numeric(z), format='%d', origin=origin)
x="2012-07-11 04:22:40.169"
datex=strptime(x,format='%Y-%m-%d %H:%M:%S')
y="2012-08-15 08:32:40.169"
datey=strptime(y,format='%Y-%m-%d %H:%M:%S')
z=difftime(y,x)
origin="2012-01-01 00:00:00"
origin=strptime(origin,format='%Y-%m-%d %H:%M:%S')
strptime(as.numeric(z), format='%d', origin=origin)
strptime(as.numeric(z), format='%d')
as.Date(as.numeric(z), format='%d', origin=origin)
origin="0000-01-01 00:00:00"
origin=strptime(origin,format='%Y-%m-%d %H:%M:%S')
as.Date(as.numeric(z), format='%d', origin=origin)
x="2012-07-11 04:22:40.169"
datex=strptime(x,format='%Y-%m-%d %H:%M:%S')
y="2012-08-15 08:32:40.169"
datey=strptime(y,format='%Y-%m-%d %H:%M:%S')
z=difftime(y,x)
origin="0000-01-01 00:00:00"
origin=strptime(origin,format='%Y-%m-%d %H:%M:%S')
as.Date(as.numeric(z), format='%d', origin=origin)
z
z=as.numeric(difftime(y,x))
z
x="2012-07-11 04:22:40.169"
datex=strptime(x,format='%Y-%m-%d %H:%M:%S')
y="2012-08-15 08:32:40.169"
datey=strptime(y,format='%Y-%m-%d %H:%M:%S')
time_diff=as.numeric(difftime(datey,datex)) #in decimal days
time_diff
csv_out_data
group <- c("a", "a", "a", "a", "b", "b", "b", "b", "c", "c", "c", "c")
value <- c(1, 3, 2, 1, 1, 1, 2, 1, 2, 3, 3, 2)
dat <- data.frame(group, value)
dat
vals=unique(dat$value)
vals=unique(dat$value)
max(vals):1
i=3
dat1=cbind(dat,dat$value==i)
dat1
dat1=cbind(dat,index=c(1:dim(dat[1]))
)
dat1=cbind(dat,index=c(1:dim(dat)[1]))
dat1
dat1=cbind(dat,dat$value==max(vals))
dat1
vals=unique(dat$value)
dat1=cbind(dat,index=c(1:dim(dat)[1]))
dat1=cbind(dat1,dat$value==max(vals))
groups=unique(dat$group)
vals=unique(dat$value)
groups=unique(dat$group)
dat1=cbind(dat,index=c(1:dim(dat)[1]))
dat1=cbind(dat1,test=dat$value==max(vals))
dat1
group="a"
max(dat1[count,dat1$group==group])
dat1[dat1$group==group,index]
dat1[dat1$group==group,"index"]
max(dat1[dat1$group==group,"index"])
dat1[dat1$group==group,"index"]==max(dat1[dat1$group==group,"index"])
vals=unique(dat$value)
groups=unique(dat$group)
dat1=cbind(dat,index=c(1:dim(dat)[1]))
dat1=cbind(dat1,test=dat$value==max(vals))
#group="a"
for (group in groups){
dat1[test,dat1$group==group]=dat1[dat1$group==group,"index"]==max(dat1[dat1$group==group,"index"])
}
for (group in groups){
dat1[dat1$group==group,"test"]=dat1[dat1$group==group,"index"]==max(dat1[dat1$group==group,"index"])
}
dat1
library(raster)
r  <-  raster(nrows=10,  ncols=10)
r[]  <-  1:ncell(r)
r
Moran(r)
f  <-  matrix(c(0,1,0,1,0,1,0,1,0),  nrow=3)
Moran(r,  f)
Geary(r)
x1  <-  MoranLocal(r)
x1
plot(x1)
r  <-  raster(nrows=10,  ncols=10)
r[]  <-  1:ncell(r)
Moran(r)
x1  <-  MoranLocal(r)
plot(x1)
for(i in 1:10){
ptm0 <- proc.time()
Sys.sleep(0.5)
ptm1=proc.time() - ptm0
jnk=as.numeric(ptm1[3])
cat('\n','It took ', jnk, "seconds to do iteration", i)
}
install.packages("ape")
library(ape)
tr <- rtree(30)
tr
plot(tr)
x <- rnorm(30)
x
tr
fix(tr)
w <- 1/cophenetic(tr)
w
diag(w) <- 0
Moran.I(x, w)
Moran.I(x, w, alt = "l")
Moran.I(x, w, alt = "g")
Moran.I(x, w, scaled = TRUE) # usualy the same
min_dist=500 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=10000 #in meters
min_scale=20 #what is the smallest text possible?
x=c(1:max_dist)
y=100*(max_dist-(x-min_dist))/(max_dist) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
#y[y<min_scale]=min_scale
plot(x,y, ylab="scale %", xlab="distance in meters")
x=c(1:max_dist)
y=100*(max_dist-(x-min_dist))^(1/2)/(max_dist)^(1/2) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
#y[y<min_scale]=min_scale
plot(x,y, ylab="scale %", xlab="distance in meters")
x=c(1:max_dist)
y=100*(max_dist-(x-min_dist))^(2)/(max_dist)^(2) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
#y[y<min_scale]=min_scale
plot(x,y, ylab="scale %", xlab="distance in meters")
x=c(1:max_dist)
y=100*(max_dist-(x-min_dist))^(3)/(max_dist)^(3) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
#y[y<min_scale]=min_scale
plot(x,y, ylab="scale %", xlab="distance in meters")
x=c(1:max_dist)
y=100*(max_dist-(x-min_dist))^(1/3)/(max_dist)^(1/3) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
#y[y<min_scale]=min_scale
plot(x,y, ylab="scale %", xlab="distance in meters")
x=c(1:max_dist)
y=100*(max_dist-(x-min_dist))/(max_dist) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
#y[y<min_scale]=min_scale
plot(x,y, ylab="scale %", xlab="distance in meters")
x=c(1:max_dist)
y=100*(1/((x-min_dist)^(1/5))) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y=100*(1/((x-min_dist)^(1/3))) #decay function
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
e
x=c(1:max_dist)
y = 100* 10^(-2*x)
plot(x,y)
x=c(1:max_dist)
y = 100* 10^(-10000*x)
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100* 10^(-max_dist*x)
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100* 10^(-max_dist*x)
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100*(10^(-max_dist*x))
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100*(10^(-x))
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = (max_dist^(-x))
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100*(2.71828^(-x*(1/max_dist)))
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100*(2.71828^(-x*(2/max_dist)))
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100*(2.71828^(-x*(3/max_dist)))
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100*(2.71828^(-x*(4/max_dist)))
#y[x<min_dist]=100
#y[y<min_scale]=0
plot(x,y)
x=c(1:max_dist)
y = 100*(2.71828^(-x*(4/max_dist)))
#y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
curvature_factor=4
x=c(1:max_dist)
y = 100*(2.71828^(-x*(curvature_factor/max_dist)))
#y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=10 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
curvature_factor=4
x=c(1:max_dist)
y = 100*(2.71828^(-x*(curvature_factor/max_dist)))
#y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
x=c(min_dist:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
#y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=50 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=20 #what is the smallest text possible?
curvature_factor=4
x=c(min_dist:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
#y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=200 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=20 #what is the smallest text possible?
curvature_factor=4
x=c(min_dist:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
#y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=10 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=20 #what is the smallest text possible?
curvature_factor=4 #this defines how steep the change in distance perception (greater numbers yield more steep curves)
x=c(1:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
#y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=10 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=20 #what is the smallest text possible?
curvature_factor=4 #this defines how steep the change in distance perception (greater numbers yield more steep curves)
x=c(1:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=10 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=10 #what is the smallest text possible?
min_dist=10 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=20 #what is the smallest text possible?
curvature_factor=4 #this defines how steep the change in distance perception (greater numbers yield more steep curves)
x=c(1:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=10 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=10 #what is the smallest text possible?
min_dist=30 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=10 #what is the smallest text possible?
curvature_factor=4 #this defines how steep the change in distance perception (greater numbers yield more steep curves)
x=c(1:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
min_dist=30 #in meters, within this distance scale does not change (to avoid gps error based differences in scale)
max_dist=1000 #in meters
min_scale=5 #what is the smallest text possible?
curvature_factor=4 #this defines how steep the change in distance perception (greater numbers yield more steep curves)
x=c(1:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y)
curvature_factor=4 #this defines how steep the change in distance perception (greater numbers yield more steep curves)
x=c(1:max_dist)
y = 100*(2.71828^(-(x-min_dist)*(curvature_factor/max_dist)))
y[x<min_dist]=100
y[y<min_scale]=0
plot(x,y, ylab="scale %", xlab="distance in meters")
!is.null(config_file)
config_file="config_file1.r"
!is.null(config_file)
setwd("C:/Users/lfortini/Dropbox/USGS/Science/0-ongoing/VAs/HI spp VA/Conceptual model/1-Model parameterization/CPT creation/")
rm(list = ls()) #remove all past worksheet variables
#do not place conditional nodes up front of array, but as first parent in CPT in genie
real_node_state_direction=c(1, 1, 1, 1) #0- fist parent state decr favorability (p of first child state), 1- incr favorability
node_importance=c(3, 3, 3, 3) #1- irrelevant, 2- relevant, 3- important, 4- crucial
parent_node_states=c(2, 3, 2, 2) #if not specified will assume 2 states for all parents
n_conditional_nodes=0
#conditional_flip= list(1, 2, 3, 4) #for each conditional node, add vector ' c()'  of states that will have direction flipped
conditional_flip= list(c(0)) #for each conditional node, add vector ' c()'  of states that will have direction flipped
conditional_change_importance= list(c(1, 4))  #for each conditional node, add vector ' c()'  of nodes that will have importance changed
conditional_change_importance_amount= list(c(-1, -1)) #for each conditional node, add vector ' c()'  of changes in state importance
relative_importance=c(0, 1, 1.5, 2) #relative weights of node importance
#START UNDERHOOD CODE
repmat = function(X,m,n){
##R equivalent of repmat (matlab)
mx = dim(X)[1]
nx = dim(X)[2]
matrix(t(matrix(X,mx,nx*n)),mx*m,nx*n,byrow=T)}
#create conditional node weights
node_state_direction=real_node_state_direction
if (exists("parent_node_states")){
node_states=parent_node_states
} else {
node_states=array(2,length(node_state_direction))}
n_nodes=length(node_states)
all_node_importance=t(as.matrix(node_importance))
all_node_state_direction=t(as.matrix(node_state_direction))
if (n_conditional_nodes>0){
for (i in n_conditional_nodes:1){
temp_node_state_direction=all_node_state_direction
temp_node_importance=all_node_importance
if (conditional_flip[[i]]!=0){
temp_node_state_direction[,conditional_flip[[i]]]=1-temp_node_state_direction[,conditional_flip[[i]]] #flips direction
#temp_node_state_direction=t(as.matrix(temp_node_state_direction))
}
if (any(conditional_change_importance[[i]]!=0)){
temp_node_importance[,conditional_change_importance[[i]]]=as.matrix(temp_node_importance[,conditional_change_importance[[i]]])+repmat(as.matrix(conditional_change_importance_amount[[i]]),nrow(temp_node_importance),1) #flips direction
temp_node_importance[temp_node_importance<1]=1
temp_node_importance[temp_node_importance>length(relative_importance)]=length(relative_importance)
}
all_node_importance=rbind(all_node_importance, temp_node_importance)
all_node_state_direction=rbind(all_node_state_direction, temp_node_state_direction)
}
}
all_node_weights=relative_importance[as.vector(all_node_importance)]
all_node_weights=matrix(all_node_weights, dim(all_node_importance))
all_node_weights=all_node_weights/repmat(matrix(apply(all_node_weights, 1, sum),nrow(all_node_weights),1),1,ncol(all_node_importance))
n_conditions=nrow(all_node_importance)
#start routine
all_Ps=matrix(,2,1)  ###CHANGE
for (j in 1:n_conditions){
node_weights=all_node_weights[j,]
cond_node_state_direction=all_node_state_direction[j,]
for (i in n_nodes:1){
if (i==n_nodes){
if (cond_node_state_direction[i]==1){
node_state=seq(0,1,length=node_states[i])
}
else {
node_state=seq(1,0,length=node_states[i])
}
node_weight=node_state*node_weights[i]
probs=array(node_weight, dim=c(node_states[i],1))
}
else {
X=probs
m=node_states[i]
n=1
mx = dim(X)[1]
nx = dim(X)[2]
probs_a=matrix(t(matrix(X,mx,nx*n)),mx*m,nx*n,byrow=T)
if (cond_node_state_direction[i]==1){
node_state=seq(0,1,length=node_states[i])
}
else {
node_state=seq(1,0,length=node_states[i])
}
node_weight=node_state*node_weights[i]
jnk=rep(node_weight,each=mx)
jnk=array(jnk, dim=c(length(jnk),1))
probs=cbind(jnk, probs_a)
}
}
pSum=rowSums(probs)
p_table=cbind(probs, pSum, 1-pSum)
p_only=cbind(pSum, 1-pSum)
p_only=t(p_only)
all_Ps=cbind(all_Ps, p_only)
}
all_Ps=all_Ps[,-1]
all_Ps[all_Ps==0]=0.0001
all_Ps[all_Ps==1]=0.9999
p_table[p_table==0]=0.0001
p_table[p_table==1]=0.9999
write.table(all_Ps, file = "all_Ps.csv", sep = ",", col.names = NA)
write.table(p_table, file = "p_table.csv", sep = ",", col.names = NA)
